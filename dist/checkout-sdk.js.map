{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/embedded-checkout/embedded-checkout-events.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///external \"card-validator\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/payment/is-vaulted-instrument.ts","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/hosted-form/iframe-content/hosted-input-events.ts","webpack:///./src/common/iframe/is-iframe-event.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/address/map-to-internal-address.ts","webpack:///./src/billing/is-billing-address-like.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///./src/cart/map-to-internal-line-items.ts","webpack:///./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack:///external \"local-storage-fallback\"","webpack:///external \"shallowequal\"","webpack:///./src/hosted-form/hosted-field-events.ts","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/cart/map-to-internal-line-item.ts","webpack:///external \"reselect\"","webpack:///./src/shipping/map-to-internal-shipping-option.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/common/utility/amount-transformer.ts","webpack:///./src/common/url/parse-url.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/customer/map-to-internal-customer.ts","webpack:///./src/order/map-to-internal-order.ts","webpack:///./src/cart/map-to-internal-cart.ts","webpack:///./src/promotion/map-to-discount-notifications.ts","webpack:///external \"@bigcommerce/bigpay-client\"","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack:///./src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack:///./src/hosted-form/iframe-content/card-number-formatter.ts","webpack:///./src/coupon/map-to-internal-coupon.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///external \"iframe-resizer\"","webpack:///external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/payment/payment-request-transformer.ts","webpack:///./src/payment/payment-request-sender.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/coupon/map-to-internal-gift-certificate.ts","webpack:///./src/common/iframe/iframe-event-poster.ts","webpack:///./src/common/iframe/iframe-event-listener.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/embedded-checkout/errors/not-embeddable-error.ts","webpack:///./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack:///./src/embedded-checkout/embedded-checkout.ts","webpack:///./src/embedded-checkout/loading-indicator.ts","webpack:///./src/embedded-checkout/resizable-iframe-creator.ts","webpack:///./src/embedded-checkout/embed-checkout.ts","webpack:///./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack:///./src/common/error/errors/custom-error.ts","webpack:///./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///external \"messageformat\"","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack:///./src/common/storage/browser-storage.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/common/iframe/iframe-resizer.ts","webpack:///./src/common/error/error-action-creator.ts","webpack:///./src/common/utility/get-environment.ts","webpack:///./src/common/log/console-logger.ts","webpack:///./src/common/log/noop-logger.ts","webpack:///./src/common/log/get-default-logger.ts","webpack:///./src/common/log/create-logger.ts","webpack:///./src/coupon/coupon-action-creator.ts","webpack:///./src/coupon/coupon-request-sender.ts","webpack:///./src/coupon/gift-certificate-action-creator.ts","webpack:///./src/coupon/gift-certificate-request-sender.ts","webpack:///./src/customer/customer-strategy-action-creator.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack:///./src/remote-checkout/remote-checkout-request-sender.ts","webpack:///./src/remote-checkout/remote-checkout-action-creator.ts","webpack:///./src/customer/customer-action-creator.ts","webpack:///./src/customer/customer-request-sender.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack:///./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack:///./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack:///./src/customer/strategies/default/default-customer-strategy.ts","webpack:///./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack:///./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack:///./src/customer/strategies/square/square-customer-strategy.ts","webpack:///./src/geography/country-action-creator.ts","webpack:///./src/geography/country-request-sender.ts","webpack:///./src/order/order-request-sender.ts","webpack:///./src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack:///./src/order/order-action-creator.ts","webpack:///./src/order/errors/order-finalization-not-required-error.ts","webpack:///./src/payment/payment-strategy-type.ts","webpack:///./src/payment/payment-strategy-action-creator.ts","webpack:///./src/cart/cart-comparator.ts","webpack:///./src/cart/errors/cart-changed-error.ts","webpack:///./src/checkout/checkout-validator.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-error.ts","webpack:///./src/hosted-form/hosted-field.ts","webpack:///./src/hosted-form/hosted-form.ts","webpack:///./src/hosted-form/hosted-form-order-data-transformer.ts","webpack:///./src/hosted-form/hosted-form-factory.ts","webpack:///./src/spam-protection/errors/spam-protection-failed-error.ts","webpack:///./src/spam-protection/spam-protection-action-creator.ts","webpack:///./src/spam-protection/spam-protection-request-sender.ts","webpack:///./src/store-credit/store-credit-action-creator.ts","webpack:///./src/store-credit/store-credit-request-sender.ts","webpack:///./src/payment/payment-action-creator.ts","webpack:///./src/payment/payment-strategy-registry.ts","webpack:///./src/common/browser-info/get-browser-info.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2.ts","webpack:///./src/payment/errors/payment-argument-invalid-error.ts","webpack:///./src/payment/errors/payment-method-cancelled-error.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack:///./src/order/order-params.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack:///./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack:///./src/payment/strategies/affirm/affirmJs.ts","webpack:///./src/payment/strategies/affirm/affirm-script-loader.ts","webpack:///./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack:///./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack:///./src/address/is-internal-address-equal.ts","webpack:///./src/common/utility/omit-private.ts","webpack:///./src/address/map-from-internal-address.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack:///./src/common/utility/cancellable-promise.ts","webpack:///./src/payment/strategies/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack:///./src/common/overlay/overlay.ts","webpack:///./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack:///./src/payment/is-credit-card-like.ts","webpack:///./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack:///./src/payment/strategies/cardinal/cardinal.ts","webpack:///./src/payment/strategies/braintree/is-braintree-error.ts","webpack:///./src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack:///./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack:///./src/payment/strategies/cardinal/cardinal-client.ts","webpack:///./src/payment/strategies/chasepay/chasepay.ts","webpack:///./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-form.ts","webpack:///./src/payment/strategies/converge/converge-payment-strategy.ts","webpack:///./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack:///./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack:///./src/payment/strategies/klarnav2/klarna-supported-countries.ts","webpack:///./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack:///./src/payment/strategies/klarna/klarna-script-loader.ts","webpack:///./src/payment/strategies/klarnav2/klarnav2-payment-strategy.ts","webpack:///./src/payment/strategies/klarnav2/klarnav2-script-loader.ts","webpack:///./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack:///./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack:///./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack:///./src/payment/strategies/offline/offline-payment-strategy.ts","webpack:///./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack:///./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack:///./src/common/error/errors/unsupported-browser-error.ts","webpack:///./src/payment/strategies/square/square-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-script-loader.ts","webpack:///./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack:///./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack:///./src/payment/strategies/wepay/wepay-risk-client.ts","webpack:///./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack:///./src/payment/errors/payment-method-declined-error.ts","webpack:///./src/payment/strategies/zip/zip-payment-strategy.ts","webpack:///./src/payment/strategies/zip/zip-script-loader.ts","webpack:///./src/payment/create-payment-strategy-registry.ts","webpack:///./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack:///./src/payment/instrument/instrument-action-creator.ts","webpack:///./src/common/date-time/add-minutes.ts","webpack:///./src/common/date-time/is-future.ts","webpack:///./src/payment/instrument/instrument-response-transformer.ts","webpack:///./src/payment/instrument/map-to-account-instrument.ts","webpack:///./src/payment/instrument/map-to-card-instrument.ts","webpack:///./src/payment/instrument/instrument-request-sender.ts","webpack:///./src/shipping/shipping-country-action-creator.ts","webpack:///./src/shipping/shipping-country-request-sender.ts","webpack:///./src/shipping/shipping-strategy-action-creator.ts","webpack:///./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack:///./src/shipping/strategies/default/default-shipping-strategy.ts","webpack:///./src/common/dom/mutation-observer.ts","webpack:///./src/common/data-store/create-data-store-projection.ts","webpack:///./src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack:///./src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack:///./src/spam-protection/google-recaptcha.ts","webpack:///./src/spam-protection/google-recaptcha-script-loader.ts","webpack:///./src/common/utility/clone-result.ts","webpack:///./src/common/selector/create-shallow-equal-selector.ts","webpack:///./src/checkout/create-checkout-selectors.ts","webpack:///./src/checkout/checkout-store-selector.ts","webpack:///./src/checkout/checkout-store-error-selector.ts","webpack:///./src/checkout/checkout-store-status-selector.ts","webpack:///./src/common/error/error-message-transformer.ts","webpack:///./src/common/utility/to-single-line.ts","webpack:///./src/checkout/checkout-service.ts","webpack:///./src/checkout/create-checkout-service-error-transformer.ts","webpack:///./src/checkout/create-checkout-service.ts","webpack:///./src/spam-protection/create-spam-protection.ts","webpack:///./src/payment/create-payment-client.ts","webpack:///./src/customer/create-customer-strategy-registry.ts","webpack:///./src/shipping/create-shipping-strategy-registry.ts","webpack:///./src/locale/language-service.ts","webpack:///./src/locale/create-language-service.ts","webpack:///./src/currency/currency-formatter.ts","webpack:///./src/currency/currency-service.ts","webpack:///./src/currency/create-currency-service.ts","webpack:///./src/analytics/analytics-step-tracker.ts","webpack:///./src/analytics/noop-step-tracker.ts","webpack:///./src/analytics/create-step-tracker.ts","webpack:///./src/analytics/is-analytics-step-tracker-window.ts","webpack:///./src/bundles/checkout-sdk.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","ShippingStrategyActionType","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","EmbeddedCheckoutEventType","InstrumentActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","GiftCertificateActionType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","ACKNOWLEDGE","FINALIZE","isPlainObject","CountryActionType","ShippingCountryActionType","isVaultedInstrument","instrument","Boolean","instrumentId","isHostedVaultedInstrument","isFormattedVaultedInstrument","formattedInstrument","formattedPayload","bigpay_token","token","StoreCreditActionType","ContentType","HostedInputEventType","isIframeEvent","HOSTED","OFFLINE","mapToInternalAddress","address","consignments","addressId","id","isBillingAddressLike","length","firstName","lastName","company","addressLine1","address1","addressLine2","address2","city","province","stateOrProvince","provinceCode","stateOrProvinceCode","postCode","postalCode","country","countryCode","phone","customFields","PaymentActionType","joinIncludes","includes","join","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","result","map","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","HostedFieldEventType","isEqual","objectA","objectB","options","Array","isArray","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keysB","isObjectEqual","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","addedByPromotion","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","SpamProtectionActionType","CustomerActionType","_decimalPlaces","Math","round","pow","this","parseUrl","url","test","anchor","document","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","withMemoizedCombiner","creator","combiner","args","pop","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","Accept","JsonV1","INTERNAL_USE_ONLY","bindMethodDecorator","_","descriptor","method","boundMethod","set","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","mapToInternalCustomer","customer","billingAddress","addresses","customerId","isGuest","storeCredit","email","fullName","customerGroupName","customerGroup","mapToInternalOrder","order","orderMeta","payments","items","currency","orderId","lineItems","code","customerCanBeCreated","payment","mapToInternalOrderPayment","subtotal","baseAmount","coupon","discountedAmount","coupons","sum","orderToken","callbackUrl","discountNotifications","giftCertificate","providerId","totalDiscountedAmount","appliedGiftCertificates","detail","remainingBalance","remaining","balance","purchaseDate","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","grandTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","physicalItems","digitalItems","lineItem","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","mapToInternalCart","checkout","promotions","notifications","cart","promotion","banners","banner","push","placeholders","discountType","messageHtml","giftCertificates","certificate","used","required","isShippingRequired","taxSubtotal","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","EmbeddedContentEventType","format","month","year","trimmedMonth","slice","trimmedYear","toObject","card","maxLength","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","replace","couponTypes","mapToInternalCoupon","displayName","couponType","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","getConsignmentByAddress","shippingAddress","_removeLineItems","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","window","location","_cardExpiryFormatter","_cardNumberFormatter","transform","checkoutState","getBillingAddress","getCustomer","getOrder","paymentMethod","paymentMethods","getPaymentMethod","gatewayId","getShippingAddress","shippingOption","getShippingOption","storeConfig","getStoreConfig","contextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","getPaymentToken","vaultAccessToken","_transformPaymentMethod","quoteMeta","geoCountryCode","source","storeProfile","transformWithHostedFormData","values","data","paymentMethodMeta","selectedShippingOption","_transformHostedInputValues","gateway","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","submitPayment","reject","_transformResponse","initializeOffsitePayment","statusText","isPrivate","joinErrors","_factoryMethods","register","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","label","fieldType","itemtype","processCountry","subdivisions","requiresState","processProvince","hasPostalCodes","processsPostCode","provider","braintreepaypal","authorizenet","stripe","stripev3","cybersource","converge","bluesnapv2","paymetric","normalize","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","bigpayToken","some","getInstruments","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrderOrThrow","createOrderSelectorFactory","createPaymentSelector","providerType","internalPayment","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","mapToInternalGiftCertificate","targetOrigin","_targetWindow","_targetOrigin","event","successType","errorType","toPromise","postMessage","setTarget","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","createCheckoutButtonRegistry","NotEmbeddableErrorType","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","StyleConfigured","getItem","setItem","now","encodeURIComponent","visibility","lastAttempt","Number","MissingContent","removeItem","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","parentOrigin","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","baseRequest","apiVersion","apiVersionMinor","hasShippingAddress","_getGooglePaymentDataRequest","parseResponse","paymentMethodData","cardNetwork","cardDetails","btoa","cardType","lastFour","paymentGatewayId","storeCountry","googleMerchantName","googleMerchantId","platformToken","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","gatewayMerchantId","cardPaymentMethod","_getCardPaymentMethod","allowedPaymentMethods","transactionInfo","totalPriceStatus","totalPrice","toFixed","currencyCode","merchantInfo","merchantName","authJwt","emailRequired","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","parameters","tokenizationSpecification","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","googlePayBraintreePaymentDataRequest","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","last4","err","stripeVersion","stripePublishableKey","fieldErrors","_namespace","rawValue","withNamespace","getItemOnce","scriptSrc","async","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeLanguage","signInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepayauthorizenet","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","shouldExecuteSpamCheck","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","_orderActionCreator","_spamProtectionActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","formId","_type","_containerId","_placeholder","_accessibilityLabel","_eventPoster","_eventListener","_cardInstrument","overflow","getType","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","AttachSucceeded","AttachFailed","_isAttachErrorEvent","_handleAttachErrorEvent","parentElement","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","lastRetry","links","fontFamily","family","_fields","_payloadTransformer","eventCallbacks","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","_cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","otherField","submit","fieldOptions","_getCardInstrument","MissingPaymentInstrument","_googleRecaptcha","spamProtectionElementId","spamProtectionElement","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","SubmitPaymentRequested","SubmitPaymentFailed","shouldSaveInstrument","promise","vault_payment_instrument","InitializeOffsitePaymentRequested","race","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getToken","KLARNAV2","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","getBrowserInfo","color_depth","screen","colorDepth","java_enabled","navigator","javaEnabled","userLanguage","screen_height","screen_width","time_zone_offset","getTimezoneOffset","AdyenActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","invalidFields","OrderIncludes","_paymentActionCreator","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","_mountComponent","componentState","_componentState","encryptedSecurityCode","encryptedExpiryMonth","encryptedCardNumber","encryptedExpiryYear","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","browser_info","paymentPayload","credit_card_token","_processAdditionalAction","_paymentComponent","unmount","_cardVerificationComponent","_getAdyenCheckout","_getAdyenV2PaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","widgetSize","_handleAction","additionalAction","threeDS2ContainerId","additionalActionOptions","onBeforeLoad","adyenAction","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentMethodType","ThreeDS2Challenge","QRCode","mount","paymentMethodName","CreditCard","ACH","Bancontact","GiroPay","iDEAL","SEPA","paymentComponent","onChange","_updateComponentState","cardVerificationContainerId","cardVerificationComponent","SecuredFields","AliPay","Sofort","Vipps","WeChatPayQR","provider_data","_stylesheetLoader","loadStylesheet","AdyenCheckout","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","unit_price","qty","item_image_url","item_url","categories","_getCategories","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","cancellable","cancel","orderRequest","_initializeOptions","frame","_createIframe","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","getSessionId","appendSessionId","processedPayment","creditCard","cardholderName","cvv","expirationDate","endpoint","_braintreePaymentProcessor","_is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","device_info","paypal_account","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","_getClientToken","start","hostedForm","iin","runBinProcess","getThreeDSecureData","three_ds_result","_getOrderData","CardinalSignatureValidationErrors","ChasePayEventType","_isConfigured","_sdk","_getClientSDK","SetupCompleted","off","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","reqTokenId","expDate","substr","accountNum","accountMask","extraData","PaReq","TermUrl","callback_url","MD","_hostedFormFactory","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","paymentSettings","bigpayBaseUrl","_hostedForm","isHostedPaymentFormEnabled","orderActionCreator","paymentActionCreator","hostedFormFactory","_threeDSecureFlow","_googlePayOptions","statusCode","supportedCountries","supportedCountriesRequiringStates","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","_needsStateCode","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","_klarnav2ScriptLoader","klarnaPayments","_klarnaPayments","_loadPaymentsWidget","klarnav2","_updateOrder","payment_method_category","Payments","orderPayload","_shouldSubmitFullPayload","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripeConnectedAccount","_stripeV3Client","elements","cardElement","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","stripeAccount","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","AFFIRM","AFTERPAY","AMAZON","AUTHORIZENET_GOOGLE_PAY","BLUESNAPV2","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","method_type","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","mapToAccountInstrument","last_4","expiryMonth","expiryYear","mapToCardInstrument","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","updateAddressRequestBody","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","ProjectionActionType","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","getResponse","reset","a","b","_event$","_recaptcha","_watchRecaptchaChallengeWindow","iframeContainer","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","val","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateSubscriptionsError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingSubscriptions","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_subscriptionsActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","executeSpamCheck","CheckoutService","createCheckoutService","setHost","createPaymentClient","orderRequestSender","MutationObserverFactory","spamProtectionRequestSender","subscriptionsActionCreator","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","AnalyticStepId","ANALYTIC_STEPS","CUSTOMER","SHIPPING","BILLING","PAYMENT","checkoutService","storage","analytics","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","extraItemsData","saveExtraItemsData","track","getTrackingPayload","revenue","tax","trackOrderComplete","readExtraItemsData","clearExtraItemData","trackStepViewed","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","shippingMethod","getPaymentMethodName","shippingMethodId","completedStepId","affiliation","toShopperCurrency","products","getProducts","getShopperCurrency","getStoreProfile","getStorageKey","ORDER_ITEMS_STORAGE_KEY","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","variant","createStepTracker","stepTrackerConfig","isAnalyticsEnabled","isAnalyticsTrackerWindow","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_subscriptionsRequestSender","_subscriptionActionCreator","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter"],"mappings":"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ACA7tD,EACAsjD,EACAC,EACAqJ,EACAP,MAIRngC,EAASriB,SAAS,GAAoBwiB,kBAAkB,WACpD,WAAI,GACArsB,EACAsjD,EACAC,EACAqJ,EACAP,MAIRngC,EAASriB,SAAS,GAAoByiB,yBAAyB,WAC3D,WAAI,GACAtsB,EACAsjD,EACAC,EACAqJ,EACAP,GACA,MAIRngC,EAASriB,SAAS,GAAoBikD,yBAAyB,WAC3D,WAAI,GACA9tD,EACAosB,EACAwgC,EACAG,EACAxJ,EACAD,EACA3kB,EAA4CxS,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAASriB,SAAS,GAAoBkkD,WAAW,WAC7C,WAAI,GACA/tD,EACAosB,EACAk3B,EACAC,EACAqJ,EACAG,EACA/gC,EACA,IAAI,EAAqBG,GACzB,IAAI,GAAgBA,OAI5BD,EAASriB,SAAS,GAAoBmkD,sBAAsB,WACxD,WAAI,GACAhuD,EACAosB,EACAwgC,EACAG,EACAxJ,EACAD,EACA,YACItjD,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBmsB,UAO9CD,EAASriB,SAAS,GAAoBokD,QAAQ,WAC1C,WAAI,GACAjuD,EACAsjD,EACAC,EACAC,EACA,IAAI,GAAgBr3B,OAI5BD,EAASriB,SAAS,GAAoB0iB,YAAY,WAC9C,WAAI,GACAvsB,EACAsjD,EACAC,EACA,IAAI,IAAuBp3B,OAInCD,EAASriB,SAAS,GAAoBqkD,mBAAmB,WACrD,WAAI,GACAluD,EACAosB,EACAwgC,EACAG,EACAxJ,EACAD,EACA,YACItjD,EACA,IAAI,SAKhBksB,EAASriB,SAAS,GAAoBskD,KAAK,WACvC,WAAI,GACAnuD,EACAsjD,EACAC,EACAqJ,EACAD,EACA,IAAI,GAAgBxgC,GACpBH,MAIRE,EAASriB,SAAS,GAAoBukD,UAAU,WAC5C,WAAI,GACApuD,EACAsjD,EACAC,EACAt3B,MAIRC,EAASriB,SAAS,GAAoBwkD,UAAU,WAC5C,WAAI,GACAruD,EACA4sD,EACArJ,EACAD,EACA,IAAI,GAAmBn3B,OAIxBD,E,gBEhZX,WACI,WACYo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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 176);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","module.exports = require(\"card-validator\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !instrument.hasOwnProperty('ccNumber') &&\n        !instrument.hasOwnProperty('ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent = (\n    HostedInputAttachSuccessEvent |\n    HostedInputAttachErrorEvent |\n    HostedInputBinChangeEvent |\n    HostedInputBlurEvent |\n    HostedInputChangeEvent |\n    HostedInputCardTypeChangeEvent |\n    HostedInputFocusEvent |\n    HostedInputSubmitSuccessEvent |\n    HostedInputSubmitErrorEvent |\n    HostedInputValidateEvent\n);\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"shallowequal\");","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent = (\n    HostedFieldAttachEvent |\n    HostedFieldSubmitRequestEvent |\n    HostedFieldValidateRequestEvent\n);\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"reselect\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { CreditCardInstrument, HostedCreditCardInstrument, HostedVaultedInstrument, VaultedInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData): PaymentRequestBody {\n        const { authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(values: HostedInputValues, payment: HostedCreditCardInstrument | HostedVaultedInstrument): CreditCardInstrument | VaultedInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n            };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    stripev3: {\n        provider: 'stripev3',\n        method: 'credit_card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    // TODO: Rename to `getCardInstruments`\n    getInstruments(): CardInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.method === 'credit_card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const cardInstruments = flatMap(supportedInstruments, card =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is CardInstrument => {\n                    return card.method === 'credit_card' && isMatch(instrument, card);\n                })\n            );\n\n            return cardInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<TSuccessEvent extends IframeEvent, TErrorEvent extends IframeEvent> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent>;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent> | void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result = options && fromEvent<MessageEvent>(window, 'message')\n            .pipe(\n                filter(event =>\n                    event.origin === this._targetOrigin &&\n                    isIframeEvent(event.data, event.data.type) &&\n                    [options.successType, options.errorType].indexOf(event.data.type) !== -1\n                ),\n                map(event => {\n                    if (options.errorType === event.data.type) {\n                        throw event.data;\n                    }\n\n                    return event.data;\n                }),\n                take(1)\n            )\n            .toPromise();\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster, IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, isIframeEvent, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer, IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload, TokenizeType } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return {\n            type: type as TokenizeType,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        };\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: 'FULL',\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to invalid configuration provided for the hosted payment form.');\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(\n        public errors: HostedInputValidateErrorDataMap\n    ) {\n        super([\n            'Unable to proceed due to invalid user input values',\n            ...flatMap(values(errors), fieldErrors => map(fieldErrors, ({ message }) => message)),\n        ].join('. '));\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    BLUESNAPV2 = 'bluesnapv2',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._spamProtectionActionCreator.execute()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport { InvalidHostedFormConfigError, InvalidHostedFormError, InvalidHostedFormValueError } from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport { HostedInputAttachErrorEvent, HostedInputEventMap, HostedInputEventType, HostedInputSubmitErrorEvent, HostedInputValidateEvent } from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        host: string,\n        formId: string,\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _cardInstrument?: CardInstrument\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `${host}/pay/hosted_forms/${formId}/field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        return fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post({\n                        type: HostedFieldEventType.AttachRequested,\n                        payload: {\n                            accessibilityLabel: this._accessibilityLabel,\n                            cardInstrument: this._cardInstrument,\n                            fontUrls: this._getFontUrls(),\n                            placeholder: this._placeholder,\n                            styles: this._styles,\n                            type: this._type,\n                        },\n                    }, {\n                        successType: HostedInputEventType.AttachSucceeded,\n                        errorType: HostedInputEventType.AttachFailed,\n                    });\n                }),\n                catchError(error => {\n                    if (this._isAttachErrorEvent(error)) {\n                        return this._handleAttachErrorEvent(error);\n                    }\n\n                    throw error;\n                }),\n                take(1)\n            ).toPromise();\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData\n    ): Promise<void> {\n        try {\n            await this._eventPoster.post({\n                type: HostedFieldEventType.SubmitRequested,\n                payload: { fields, data },\n            }, {\n                successType: HostedInputEventType.SubmitSucceeded,\n                errorType: HostedInputEventType.SubmitFailed,\n            });\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const { payload } = await this._eventPoster.post<HostedInputValidateEvent>({\n            type: HostedFieldEventType.ValidateRequested,\n        }, {\n            successType: HostedInputEventType.Validated,\n        });\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private async _handleAttachErrorEvent(event: HostedInputAttachErrorEvent): Promise<void> {\n        const lastRetry = Number(this._storage.getItem(LAST_RETRY_KEY));\n\n        // This is to prevent the possibility of getting into a retry loop, in\n        // case there is something unexpected that prevents the shopper from\n        // being able to recover from an invalid hosted payment form error.\n        if (!lastRetry || Date.now() - lastRetry > RETRY_INTERVAL) {\n            this._storage.setItem(LAST_RETRY_KEY, Date.now());\n            this._location.replace(event.payload.error.redirectUrl);\n\n            return new Promise(() => {});\n        }\n\n        throw new InvalidHostedFormError(event.payload.error.message);\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice.call(links)\n            .filter(link => parseUrl(link.href).hostname === hostname)\n            .filter(link => values(this._styles)\n                .map(style => style && style.fontFamily)\n                .filter((family): family is string => typeof family === 'string')\n                .some(family => family.split(/,\\s/).some(name => link.href.indexOf(name.replace(' ', '+')) !== -1))\n            )\n            .map(link => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n\n    private _isAttachErrorEvent(event: any): event is HostedInputAttachErrorEvent {\n        return event.type === HostedInputEventType.AttachFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport { HostedInputEventMap, HostedInputEventType } from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<HostedFormOptions, 'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onValidate'>;\n\nexport default class HostedForm {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        eventCallbacks: HostedFormEventCallbacks\n    ) {\n        const { onBlur = noop, onCardTypeChange = noop, onFocus = noop, onValidate = noop } = eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) => onBlur(payload));\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => onCardTypeChange(payload));\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) => onFocus(payload));\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) => onValidate(payload));\n\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => this._cardType = payload.cardType);\n        this._eventListener.addListener(HostedInputEventType.BinChanged, ({ payload }) => this._bin = payload.bin);\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map(otherField => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach(field => {\n            field.detach();\n        });\n    }\n\n    async submit(payload: OrderPaymentRequestBody): Promise<void> {\n        return await this._getFirstField().submitForm(\n            this._fields.map(field => field.getType()),\n            this._payloadTransformer.transform(payload)\n        );\n    }\n\n    async validate(): Promise<void> {\n        return await this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the payment form has no field defined.');\n        }\n\n        return field;\n    }\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport { isVaultedInstrument, HostedCreditCardInstrument } from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    transform(payload: OrderPaymentRequestBody): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(payload.paymentData, 'ccExpiry', 'ccName', 'ccNumber', 'ccCvv') as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payload.methodId, payload.gatewayId);\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n\n        const authToken = instrumentMeta && payment && isVaultedInstrument(payment) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { CardInstrument } from '../payment/instrument';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nconst STORAGE_NAMESPACE = 'BigCommerce.HostedField';\n\nexport default class HostedFormFactory {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    create(host: string, formId: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap & HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    host,\n                    formId,\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new BrowserStorage(STORAGE_NAMESPACE),\n                    window.location,\n                    'instrumentId' in fieldOptions ?\n                        this._getCardInstrument(fieldOptions.instrumentId) :\n                        undefined\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onFocus', 'onCardTypeChange', 'onValidate')\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const { instruments: { getCardInstrument } } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender\n    ) {}\n\n    initialize(options?: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n            defer(async () => {\n                const spamProtectionElementId = options ? options.containerId : 'spamProtectionContainer';\n\n                if (!options && !document.getElementById(spamProtectionElementId)) {\n                    const spamProtectionElement = document.createElement('div');\n                    spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                    document.body.appendChild(spamProtectionElement);\n                }\n\n                const state = store.getState();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                return createAction(SpamProtectionActionType.InitializeSucceeded);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SpamProtectionActionType.InitializeFailed, error))\n        );\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const { shouldExecuteSpamCheck } = checkout;\n\n            if (!shouldExecuteSpamCheck) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n                this._googleRecaptcha.execute()\n                    .pipe(take(1))\n                    .pipe(switchMap(({ error, token }) => {\n                        if (error || !token) {\n                            throw new SpamProtectionFailedError();\n                        }\n\n                        return this._requestSender.validate(checkout.id, token)\n                            .then(({ body }) => createAction(SpamProtectionActionType.ExecuteSucceeded, body));\n                    }))\n            ).pipe(\n                catchError(error => throwErrorAction(SpamProtectionActionType.ExecuteFailed, error))\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    validate(checkoutId: string, token: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string,\n        instrumentId?: string,\n        shouldSaveInstrument?: boolean,\n        target?: string,\n        promise?: Promise<undefined>\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = { formattedPayload: { vault_payment_instrument: shouldSaveInstrument } };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race([this._paymentRequestSender.initializeOffsitePayment(payload, target), promise].filter(Boolean))\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        if (paymentMethod.gateway === 'klarna') {\n            return PaymentStrategyType.KLARNAV2;\n        }\n\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export enum AdyenActionType {\n    /*\n    * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n    * or the challenge flow.\n    * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n    * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n    * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n    * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n    * */\n    Redirect = 'redirect',\n\n    /*\n    * The Component presents the QR code and calls the onAdditionalDetails event.\n    * */\n    QRCode = 'qrCode',\n\n    /*\n    * The Component displays the voucher which the shopper uses to complete the payment.\n    * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    iDEAL = 'ideal',\n    GiroPay = 'giropay',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        }\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenComponentState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: AdyenCreditCardComponentOptions | AdyenIdealComponentOptions | AdyenCustomCardComponentOptions): AdyenComponent;\n\n    createFromAction(action: AdyenAction, componentOptions?: ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenCreditCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenIdealComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport type AdyenComponentState = (\n    CardState | WechatState\n);\n\nexport default function isCardState(param: any): param is CardState {\n    return param && typeof param.data.paymentMethod.encryptedSecurityCode === 'string' ||\n        typeof param.data.paymentMethod.encryptedExpiryMonth === 'string';\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport isCardState, { AdyenAction, AdyenActionType, AdyenAdditionalAction, AdyenAdditionalActionState, AdyenCheckout, AdyenComponent, AdyenComponentState, AdyenComponentType, AdyenConfiguration, AdyenError, AdyenPaymentMethodType } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _paymentComponent?: AdyenComponent;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: AdyenV2ScriptLoader,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        this._scriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n                this._mountComponent(paymentMethod.method);\n            });\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                const componentState = this._componentState;\n\n                if (!componentState) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                if (paymentData && isVaultedInstrument(paymentData) && isCardState(componentState)) {\n                    const { encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear } = componentState.data.paymentMethod;\n\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    token: paymentData.instrumentId,\n                                    credit_card_number_confirmation: encryptedCardNumber,\n                                    expiry_month: encryptedExpiryMonth,\n                                    expiry_year: encryptedExpiryYear,\n                                    verification_value: encryptedSecurityCode,\n                                },\n                                browser_info: getBrowserInfo(),\n                            },\n                        },\n                    }));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        formattedPayload: {\n                            credit_card_token: {\n                                token: JSON.stringify({\n                                    ...componentState.data.paymentMethod,\n                                    origin: window.location.origin,\n                                }),\n                            },\n                            browser_info: getBrowserInfo(),\n                            vault_payment_instrument: shouldSaveInstrument,\n                        },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => this._processAdditionalAction(error, shouldSaveInstrument));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenCheckout(): AdyenCheckout {\n        if (!this._adyenCheckout) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenCheckout;\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } = this._getAdyenV2PaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenCheckout().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(adyenAction.type === AdyenActionType.ThreeDS2Challenge ||\n                    adyenAction.type === AdyenActionType.QRCode);\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mountComponent(paymentMethodName: string): void {\n        const adyenv2 = this._getAdyenV2PaymentInitializeOptions();\n        const adyenCheckout = this._getAdyenCheckout();\n\n        switch (paymentMethodName) {\n            case AdyenPaymentMethodType.CreditCard:\n            case AdyenPaymentMethodType.ACH:\n            case AdyenPaymentMethodType.Bancontact:\n            case AdyenPaymentMethodType.GiroPay:\n            case AdyenPaymentMethodType.iDEAL:\n            case AdyenPaymentMethodType.SEPA:\n                const paymentComponent = adyenCheckout.create(paymentMethodName, {\n                        ...adyenv2.options,\n                        onChange: componentState => this._updateComponentState(componentState),\n                    }\n                );\n\n                paymentComponent.mount(`#${adyenv2.containerId}`);\n\n                this._paymentComponent = paymentComponent;\n\n                if (adyenv2.cardVerificationContainerId) {\n                    const cardVerificationComponent = adyenCheckout.create(AdyenComponentType.SecuredFields, {\n                        ...adyenv2.options,\n                        onChange: componentState => this._updateComponentState(componentState),\n                        onError: componentState => this._updateComponentState(componentState),\n                    });\n\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n\n                    this._cardVerificationComponent = cardVerificationComponent;\n                }\n                break;\n\n            case AdyenPaymentMethodType.AliPay:\n            case AdyenPaymentMethodType.Sofort:\n            case AdyenPaymentMethodType.Vipps:\n            case AdyenPaymentMethodType.WeChatPayQR:\n                this._updateComponentState({\n                    data: {\n                        paymentMethod: {\n                            type: paymentMethodName,\n                        },\n                    },\n                });\n        }\n    }\n\n    private async _processAdditionalAction(error: any, shouldSaveInstrument?: boolean): Promise<any> {\n        if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'additional_action_required'})) {\n            return Promise.reject(error);\n        }\n        const payment = await this._handleAction(error.body.provider_data);\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                },\n            }));\n        } catch (error) {\n            return this._processAdditionalAction(error, shouldSaveInstrument);\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenCheckout, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.6.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.6.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport { BlueSnapV2PaymentInitializeOptions } from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(\n                NotInitializedErrorType.PaymentNotInitialized\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        return this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n            payment.methodId,\n            payment.gatewayId,\n            undefined,\n            false,\n            frame.name,\n            promise.promise\n        ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border as string;\n            iframe.style.height = height as string;\n            iframe.style.width = width as string;\n        }\n\n        return iframe;\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData, BraintreeShippingAddressOverride, BraintreeTokenizePayload, BraintreeVerifyPayload } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector()\n            .then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument, { isHostedVaultedInstrument } from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { nonce, config: { isVaultingEnabled } } = this._paymentMethod;\n        const { paymentData = {} } = payment;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError('Vaulting is disabled but a vaulted instrument was being used for this transaction');\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (paymentData.shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError('Vaulting is disabled but shouldSaveInstrument is set to true');\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress ? mapToBraintreeShippingAddressOverride(shippingAddress) : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: paymentData.shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([\n            { nonce, details },\n            sessionId,\n        ]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(nonce, details.email, sessionId, paymentData.shouldSaveInstrument),\n        }));\n    }\n\n    private _formattedPayload(token: string, email?: string, sessionId?: string, vaultPaymentInstrument?: boolean): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderRequestBody } from '../../../order';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm\n    ): Promise<InternalCheckoutSelectors> {\n        const { instruments: { getCardInstrument }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument = isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(merge(payload, {\n                payment: {\n                    paymentData: {\n                        threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                    },\n                },\n            }), options);\n        } catch (error) {\n            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData());\n\n            if (!hostedForm) {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment(merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                })));\n            }\n\n            await hostedForm.submit(merge(payload.payment, {\n                paymentData: { threeDSecure },\n            }));\n\n            return this._store.getState();\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(method.id)\n        );\n\n        return getPaymentMethodOrThrow(method.id).clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckoutOrThrow();\n        const order = state.order.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n    private _isConfigured: boolean = false;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._isConfigured) {\n            return Promise.resolve();\n        }\n\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    this._isConfigured = true;\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled() && this._shouldRenderHostedForm ?\n            this._executeWithHostedForm(payload, options) :\n            this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isHostedPaymentFormEnabled() || !this._isHostedFieldAvailable(options)) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } = config.getStoreConfig() || {};\n        const { payment: { formId = '' } = {} } = config.getContextConfig() || {};\n\n        if (!formOptions || !formId) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formId, formOptions);\n\n        return form.attach()\n            .then(() => {\n                this._shouldRenderHostedForm = true;\n                this._hostedForm = form;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _executeWithoutHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _executeWithHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>  {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form.validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    private _isHostedPaymentFormEnabled(): boolean {\n        const { config } = this._store.getState();\n        const { checkoutSettings: { isHostedPaymentFormEnabled = false } = {} } = config.getStoreConfig() || {};\n\n        return isHostedPaymentFormEnabled;\n    }\n\n    private _isHostedFieldAvailable(options?: PaymentInitializeOptions): boolean {\n        return !(values(options && options.creditCard && options.creditCard.form.fields).every(isNil));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","export const supportedCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH', 'NZ'];\nexport const supportedCountriesRequiringStates = ['AU'];\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { supportedCountries, supportedCountriesRequiringStates } from '../klarnav2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaPayments, { KlarnaAddress, KlarnaAuthorizationResponse, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-payments';\nimport { supportedCountries, supportedCountriesRequiringStates } from './klarna-supported-countries';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\n\nexport default class KlarnaV2PaymentStrategy implements PaymentStrategy {\n    private _klarnaPayments?: KlarnaPayments;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnav2ScriptLoader: KlarnaV2ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnav2ScriptLoader.load()\n            .then(klarnaPayments => { this._klarnaPayments = klarnaPayments; })\n            .then(() => this._loadPaymentsWidget(options))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n        const { gatewayId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        return this._authorize(paymentPayload.methodId)\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(gatewayId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadPaymentsWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarnav2\" argument is not provided.');\n        }\n\n        const { methodId, gatewayId, klarnav2: { container, onLoad } } = options;\n        const state = this._store.getState();\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        this._updateOrder(gatewayId);\n\n        return new Promise<KlarnaLoadResponse>(resolve => {\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!this._klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this._klarnaPayments.load({ container, payment_method_category: paymentMethod.id }, response => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n                resolve(response);\n            });\n        });\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async _updateOrder(gatewayId: string) {\n        await this._paymentMethodActionCreator.loadPaymentMethod(gatewayId).toPromise();\n    }\n\n    private _authorize(methodId: string): Promise<KlarnaAuthorizationResponse> {\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            if (!this._klarnaPayments) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.authorize({ payment_method_category: methodId }, updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaPayments> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaV2Window).Klarna.Payments);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId = paymentData && (paymentData as VaultedInstrument).instrumentId;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n                    payment.methodId,\n                    payment.gatewayId,\n                    instrumentId,\n                    shouldSaveInstrument))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { ACKNOWLEDGE } from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { payment: { getPaymentStatus }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentStatus() === ACKNOWLEDGE) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: { methodId },\n                }, options)\n            );\n        }\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options)\n            .catch((error: Error) => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    }, undefined, '_top');\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize(options);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { StripeAddress, StripeBillingDetails, StripeCardElement, StripeHandleCardPaymentOptions, StripePaymentMethodData, StripeShippingDetails, StripeV3Client } from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeV3Client = await this._stripeScriptLoader.load(\n            paymentMethod.initializationData.stripePublishableKey,\n            paymentMethod.initializationData.stripeConnectedAccount);\n        const elements = this._stripeV3Client.elements();\n        const cardElement = elements.create('card', {\n            style: stripeOptions.style,\n        });\n        cardElement.mount(`#${stripeOptions.containerId}`);\n        this._cardElement = cardElement;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string, stripeAccount: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                    stripeAccount,\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { GoogleRecaptcha, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { BlueSnapV2PaymentStrategy } from './strategies/bluesnapv2';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, BraintreeCreditCardPaymentStrategy, BraintreePaypalPaymentStrategy, BraintreeScriptLoader, BraintreeSDKCreator, BraintreeVisaCheckoutPaymentStrategy, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { CardinalClient, CardinalScriptLoader, CardinalThreeDSecureFlow } from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { createGooglePayPaymentProcessor, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { KlarnaV2PaymentStrategy, KlarnaV2ScriptLoader } from './strategies/klarnav2';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender))\n    );\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, new SpamProtectionRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator, spamProtectionActionCreator);\n    const formPoster = createFormPoster();\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.BLUESNAPV2, () =>\n        new BlueSnapV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNAV2, () =>\n        new KlarnaV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaV2ScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\nimport { mapToAccountInstrument } from './map-to-account-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): PaymentInstrument[] {\n        return vaultedInstruments\n            .map(instrument => {\n                switch (instrument.method_type) {\n                    case 'paypal':\n                        return mapToAccountInstrument(instrument);\n                    default:\n                        return mapToCardInstrument(instrument);\n                }\n            });\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { AccountInstrument } from './instrument';\nimport { AccountInternalInstrument } from './instrument-response-body';\n\nexport function mapToAccountInstrument(instrument: AccountInternalInstrument): AccountInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method_type,\n        type: 'account',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method:  instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        const updateAddressRequestBody = {\n            ...this._store.getState().shippingAddress.getShippingAddress(),\n            customFields: address.customFields,\n        } as AddressRequestBody;\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(),\n                    });\n                    recaptcha.reset();\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        const event$ = this._event$;\n        const recaptcha = this._recaptcha;\n\n        if (!event$ || !recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        const timeout = 7000;\n        const retryInterval = 250;\n        const maxRetries = timeout / retryInterval;\n\n        return defer(() => {\n            const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n            return element ?\n                of(element) :\n                throwError(new SpamProtectionNotLoadedError());\n        })\n            .pipe(\n                retryWhen(errors => errors.pipe(\n                    delay(retryInterval),\n                    switchMap((error, index) =>\n                        index < maxRetries ? of(error) : throwError(error)\n                    )\n                )),\n                switchMap(element => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute();\n\n                    return event$;\n                }),\n                catchError(error => of({ error }))\n            );\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) => clone(() => {\n            const billingAddress = getBillingAddress();\n            const context = getContextConfig();\n            const isEmptyBillingAddress = !billingAddress ||\n                values(omit(billingAddress, 'email', 'id')).every(val => !val || !val.length);\n\n            if (isEmptyBillingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return billingAddress;\n                }\n\n                return {\n                    id: billingAddress ? billingAddress.id : '',\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    email: billingAddress ? billingAddress.email : '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return billingAddress;\n        })\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod?: PaymentMethod): PaymentInstrument[] | undefined {\n                return paymentMethod ? getInstrumentsByPaymentMethod(paymentMethod) : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update subscriptions.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateSubscriptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateSubscriptionsError: state.subscriptions.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n\n    /**\n     * Checks whether the subscriptions are being updated.\n     *\n     * @returns True if updating subscriptions, otherwise false.\n     */\n    isUpdatingSubscriptions(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isExecutingSpamCheck()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isUpdatingSubscriptions: state.subscriptions.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\nimport { Subscriptions, SubscriptionsActionCreator } from '../subscription';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _subscriptionsActionCreator: SubscriptionsActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Updates the subscriptions associated to an email.\n     *\n     * @param subscriptions - The email and associated subscriptions to update.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    updateSubscriptions(subscriptions: Subscriptions, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._subscriptionsActionCreator.updateSubscriptions(subscriptions, options);\n\n        return this._dispatch(action, { queueId: 'subscriptions' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use, with optional subscriptions.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action)\n            .then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize();\n\n        return this._dispatch(action, { queueId: 'spamProtection' })\n            .then(() => {\n                const action = this._spamProtectionActionCreator.execute();\n\n                return this._dispatch(action, { queueId: 'spamProtection' });\n            });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { createSpamProtection, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, spamProtectionRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender)\n    );\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            subscriptionsActionCreator\n        ),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator,\n            spamProtectionActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender)),\n        subscriptionsActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepayauthorizenet', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted: boolean = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean; } = {};\n    private _analyticStepOrder: AnalyticStepType[] = [\n        'customer',\n        'shipping',\n        'billing',\n        'payment',\n    ];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private storage: StorageFallback,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {}\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some(value => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(', ')}.`\n                );\n            }\n            this._analyticStepOrder = checkoutSteps;\n\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: {\n                lineItems,\n                discountAmount,\n                id,\n            },\n        } = checkout;\n\n        const extraItemsData = this.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track('Checkout Started', this.getTrackingPayload({\n            revenue: grandTotal,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            lineItems,\n            extraItemsData,\n        }));\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        this.analytics.track('Order Completed', this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        }));\n\n        this.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId = stepId === AnalyticStepId.SHIPPING ?\n            `${stepId}-${shippingMethodId}` :\n            stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map(coupon => coupon.code).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return this._completedSteps.hasOwnProperty(stepId) ||\n            (\n                stepId === AnalyticStepId.SHIPPING &&\n                this._completedSteps.hasOwnProperty(`${stepId}-${shippingMethodId}`)\n            );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const { data: { getOrder } } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const { data: { getCheckout } } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].reduce((result, item) => {\n            result[item.productId] = {\n                brand: item.brand ? item.brand : '',\n                category: item.categoryNames ? item.categoryNames.join(', ') : '',\n            };\n\n            return result;\n        }, {} as ExtraItemsData);\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n\n    private readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    private clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return (shippingOption && shippingOption.id && shippingOption.description) ?\n            shippingOption :\n            null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return (paymentMethod && paymentMethod.config) ?\n            paymentMethod.config.displayName || '' :\n            '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map(item => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map(item => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(item => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map(option => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.listPrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [\n            ...customItems,\n            ...physicalAndDigitalItems,\n            ...giftCertificateItems,\n        ];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {\n        return;\n    }\n\n    trackOrderComplete(): void {\n        return;\n    }\n\n    trackStepViewed(): void {\n        return;\n    }\n\n    trackStepCompleted(): void {\n        return;\n    }\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @alpha\n * Please note that `StepTracker` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            localStorageFallback,\n            window.analytics,\n            stepTrackerConfig\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from '../checkout';\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\nexport { embedCheckout } from '../embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from '../embedded-checkout/iframe-content';\nexport { createLanguageService } from '../locale';\nexport { createCurrencyService } from '../currency';\nexport { createStepTracker } from '../analytics';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}