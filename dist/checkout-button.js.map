{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/form/form-fields-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/signin-email/signin-email-actions.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///external \"shallowequal\"","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///external \"reselect\"","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/form/form-fields-state.ts","webpack:///./src/form/form-fields-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/signin-email/signin-email-state.ts","webpack:///./src/signin-email/signin-email-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/signin-email/signin-email-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/form/form-fields-action-creator.ts","webpack:///./src/form/form-fields-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/bundles/checkout-button.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack:///./src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts","webpack:///./src/shipping/getShippableItemsCount.ts","webpack:///./src/shipping/getLineItemsCount.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","ShippingStrategyActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","InstrumentActionType","GiftCertificateActionType","RemoteCheckoutActionType","ButtonType","ButtonColor","BillingAddressFormat","DEFAULT_RESPONSE","body","headers","status","response","errors","ACKNOWLEDGE","FINALIZE","ConfigActionType","FormFieldsActionType","ContentType","isPlainObject","CountryActionType","ShippingCountryActionType","SignInEmailActionType","StoreCreditActionType","HOSTED","OFFLINE","PaymentActionType","joinIncludes","includes","join","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","INTERNAL_USE_ONLY","SpamProtectionActionType","CustomerActionType","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","instanceMethods","set","bindMethodDecorator","boundMethod","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","loadHostedFields","hostedFields","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","version","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","createHostedFields","_teardown","default","mod","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","map","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","id","LoadCheckoutRequested","loadConfig","loadFormFields","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","customItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","origin","window","location","isPrivate","indexOf","joinErrors","reduce","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","push","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","orderId","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","formFields","countries","countryCode","selectedCountry","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","getLoadError","loadError","isLoading","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","barclays","braintreepaypal","authorizenet","elavon","checkoutcom","stripe","cybersource","converge","bluesnapv2","orbital","paymetric","bolt","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","createCartSelector","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","getStoreConfig","formState","storeConfig","getStoreConfigOrThrow","getExternalSource","externalSource","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","instrument","bigpayToken","some","card","getInstruments","supportedProvider","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","test","selector","idPrefix","containers","document","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","_createSignInButton","_walletButton","parentNode","removeChild","getElementById","_getAmazonPayV2ButtonOptions","amazonButtonOptions","createButton","shopPath","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","createCheckoutSession","sandbox","productType","getShippableItemsCount","PayOnly","PayAndShip","placement","Cart","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","amount","currency","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","stateOrProvinceCode","_googlePayPaymentProcessor","_methodId","_getMethodId","googlePayButton","_handleWalletButtonClick","appendChild","event","preventDefault","hasPhysicalItems","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","removeEventListener","buttonContainer","button","createElement","src","addEventListener","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","clientId","actions","res","_onError","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","_paypalCommercePaymentProcessor","buttonParams","onApprove","onClick","_handleClickButtonProvider","paypalCommerce","messagingContainer","isMessagesAvailable","_getParamsScript","renderButtons","renderMessages","_isCredit","fundingSource","orderID","order_id","intent","isPayPalCreditAvailable","disableFunding","components","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","paypalCommercePaymentProcessor","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_STRIPE","PAYPALEXPRESS","PAYPALCOMMERCE","AMAZON_PAY_V2","createCheckoutButtonRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","_formFieldsRequestSender","loadFields","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","info","cardType","lastFour","currencyCode","gatewayMerchantId","merchantName","apiVersion","apiVersionMinor","merchantInfo","authJwt","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","btoa","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","paymentMethodData","tokenizationData","androidPayCards","description","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","cardNetwork","cardDetails","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","credentials","Json","Authorization","brand","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","scriptSrc","async","attributes","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","loadPaypalCommerce","isProgressiveOnboardingAvailable","_validateParams","paypalLoadScript","setupPayment","isCredit","isCheckout","isCreditCard","_paypalCommerceRequestSender","_validateStyleParams","updatedStyle","color","layout","height","tagline","horizontal","paramsScript","optionalParams","Buttons","paramsForProvider","fundingKey","onRenderButton","createOrder","_fundingSource","_paypalButtons","isEligible","_processNotEligible","cartTotal","Messages","_paypalMessages","renderHostedFields","events","HostedFields","fields","styles","paymentsSDK","_hostedFields","submitHostedFields","submit","getHostedFieldsValidationState","isValid","close","PAYLATER","createPaypalCommercePaymentProcessor","paypalScriptLoader","paypalCommerceRequestSender","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","signout","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_billingAddressActionCreator","_consignmentActionCreator","_configureWallet","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","cardInformation","number","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_subscriptionsRequestSender","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","addedByPromotion","total"],"mappings":"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","file":"checkout-button.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 192);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadFormFieldsAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    LoadFormFieldsRequestedAction |\n    LoadFormFieldsSucceededAction |\n    LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"reselect\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript('//js.braintreegateway.com/web/3.59.0/js/hosted-fields.min.js');\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2}));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig(),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true })\n            ),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | ContinueAsGuestAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, { DEFAULT_STATE, FormFieldsErrorState, FormFieldsStatusesState } from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction\n): FormFields | undefined {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction\n): FormFieldsErrorState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction\n): FormFieldsStatusesState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.shippingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.billingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => () => formFields ? formFields.customerAccount : []\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: FormFieldsState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () => data && formFields ? ({\n            ...data.storeConfig,\n            formFields,\n        }) : undefined\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE,\n        formState: FormFieldsState\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state, { formState }),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { AmazonPayV2ButtonParams, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { AmazonPayV2ButtonInitializeOptions } from './amazon-pay-v2-button-options';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, amazonpay } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" or \"methodId\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = await this._createSignInButton(containerId, paymentMethod, amazonpay);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _createSignInButton(containerId: string, paymentMethod: PaymentMethod, options?: AmazonPayV2ButtonInitializeOptions): Promise<HTMLElement> {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const amazonButtonOptions = options ?? await this._getAmazonPayV2ButtonOptions(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n\n    private async _getAmazonPayV2ButtonOptions(paymentMethod: PaymentMethod): Promise<AmazonPayV2ButtonParams> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCart();\n        const { storeProfile: { shopPath } } = state.config.getStoreConfigOrThrow();\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId || !ledgerCurrency || !shopPath) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            merchantId,\n            createCheckoutSession: {\n                url: `${shopPath}/remote-checkout/${paymentMethod.id}/payment-session`,\n                method: checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n            sandbox: !!testMode,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement: AmazonPayV2Placement.Cart,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, DisableFundingType, PaypalCommerceInitializationData, PaypalCommercePaymentProcessor, PaypalCommerceScriptParams } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _isCredit?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const { initializationData } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const buttonParams: ButtonsOptions = {\n            onApprove: data => this._tokenizePayment(data),\n            onClick: data => this._handleClickButtonProvider(data),\n        };\n\n        if (options.paypalCommerce && options.paypalCommerce.style) {\n            buttonParams.style = options.paypalCommerce.style;\n        }\n\n        const messagingContainer = options.paypalCommerce?.messagingContainer;\n        const isMessagesAvailable = Boolean(messagingContainer && document.getElementById(messagingContainer));\n\n        await this._paypalCommercePaymentProcessor.initialize(this._getParamsScript(initializationData, cart));\n\n        this._paypalCommercePaymentProcessor.renderButtons(cart.id, `#${options.containerId}`, buttonParams);\n\n        if (isMessagesAvailable) {\n            this._paypalCommercePaymentProcessor.renderMessages(cart.cartAmount, `#${messagingContainer}`);\n        }\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isCredit = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider({ fundingSource }: ClickDataOptions): void {\n        this._isCredit = fundingSource === 'credit' || fundingSource === 'paylater';\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this._isCredit ? 'paypalcommercecredit' : 'paypalcommerce',\n            order_id: orderID,\n        });\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptParams {\n        const { clientId, intent, isPayPalCreditAvailable, merchantId } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            'client-id': clientId,\n            'merchant-id': merchantId,\n            commit: false,\n            currency: cart.currency.code,\n            components: ['buttons', 'messages'],\n            'disable-funding': disableFunding,\n            intent,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { createPaypalCommercePaymentProcessor } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n    const paypalCommercePaymentProcessor = createPaypalCommercePaymentProcessor(scriptLoader, requestSender);\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalCommercePaymentProcessor\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(\n        private _formFieldsRequestSender: FormFieldsRequestSender\n    ) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            })\n        ).pipe(\n            catchError(response => throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload, TokenizeType } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload, TokenizeType } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey: string = '';\n    private _testMode: boolean = true;\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        return {\n            nonce: finalToken,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<string> {\n        if (!token || !token.protocolVersion) {\n            throw new PaymentMethodFailedError('Unable to parse response from GooglePay.');\n        }\n\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken.token;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL: string = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL: string = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\n","\nexport interface ApproveDataOptions {\n    orderID: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string>;\n    onApprove?(data: ApproveDataOptions): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    SOFORT: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n}\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions): PaypalCommerceButtons;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n    isProgressiveOnboardingAvailable?: boolean;\n    clientToken?: string;\n}\n\nexport type DisableFundingType = Array<'credit' | 'card'>;\n\nexport type ComponentsScriptType = Array<'buttons' | 'messages' | 'hosted-fields'>;\n\nexport interface PaypalCommerceScriptParams  {\n    'client-id': string;\n    'merchant-id'?: string;\n    'disable-funding'?: DisableFundingType;\n    'data-client-token'?: string;\n    'partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    components?: ComponentsScriptType;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptParams, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce(params: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._validateParams(params, isProgressiveOnboardingAvailable);\n\n        if (!this._window.paypalLoadScript) {\n            const scriptSrc = 'https://unpkg.com/@paypal/paypal-js@1.0.2/dist/paypal.browser.min.js';\n\n            await this._scriptLoader.loadScript(scriptSrc, {async: true, attributes: {}});\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(params);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    _validateParams(options: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): void {\n        const CLIENT_ID = 'client-id';\n        const MERCHANT_ID = 'merchant-id';\n        let param;\n\n        if (!options) {\n            param = 'options';\n        } else if (!options[CLIENT_ID]) {\n            param = CLIENT_ID;\n        } else if (!options[MERCHANT_ID] && !isProgressiveOnboardingAvailable) {\n            param = MERCHANT_ID;\n        }\n\n        if (param) {\n            throw new InvalidArgumentError(`Unable to proceed because \"${param}\" argument in PayPal script is not provided.`);\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\n\nimport { OrderData } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body as OrderData;\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ButtonsOptions, ParamsForProvider, PaypalButtonStyleOptions, PaypalCommerceButtons, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsApprove, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceHostedFieldsSubmitOptions, PaypalCommerceMessages, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceScriptParams, PaypalCommerceSDK, PaypalCommerceSDKFunding, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape } from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _paypalMessages?: PaypalCommerceMessages;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(paramsScript: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript, isProgressiveOnboardingAvailable);\n\n        return this._paypal;\n    }\n\n    renderButtons(cartId: string, container: string, params: ButtonsOptions = {}, optionalParams: OptionalParamsRenderButtons = {}): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n            onClick: async (data, actions) => {\n                this._fundingSource = data.fundingSource;\n\n                return params.onClick?.(data, actions);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            this._processNotEligible(buttonParams, fundingKey);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    renderMessages(cartTotal: number, container: string): PaypalCommerceMessages {\n        if (!this._paypal || !this._paypal.Messages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n        this._paypalMessages = this._paypal.Messages({\n            amount: cartTotal,\n            placement: 'cart',\n            style: {\n                layout: 'text',\n            },\n        });\n        this._paypalMessages.render(container);\n\n        return this._paypalMessages;\n    }\n\n    async renderHostedFields(cartId: string, params: ParamsRenderHostedFields, events?: EventsHostedFields): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: () => this._setupPayment(cartId, { isCreditCard: true }),\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach(key => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(key, events[key] as (event: PaypalCommerceHostedFieldsState) => void);\n            });\n        }\n    }\n\n    async submitHostedFields(options?: PaypalCommerceHostedFieldsSubmitOptions): Promise<PaypalCommerceHostedFieldsApprove> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit(omitBy(options, isNil));\n    }\n\n    getHostedFieldsValidationState(): { isValid: boolean; fields: PaypalCommerceHostedFieldsState['fields'] } {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { fields } = this._hostedFields.getState();\n\n        const isValid = (Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>)\n            .every(key => fields[key]?.isValid);\n\n        return { isValid, fields };\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close?.();\n\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = { ...params, isCredit: this._fundingSource === 'credit' || this._fundingSource === 'paylater' };\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, paramsForProvider);\n\n        return orderId;\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions  => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n    private _processNotEligible(buttonParams: ButtonsOptions, fundingKey?: keyof PaypalCommerceSDKFunding): void {\n        if (fundingKey === this._paypal?.FUNDING.PAYLATER) {\n            buttonParams.fundingSource = this._paypal?.FUNDING.CREDIT;\n\n            this._paypalButtons = this._paypal?.Buttons(buttonParams);\n\n            if (this._paypalButtons?.isEligible()) {\n                return;\n            }\n        }\n\n        throw new NotImplementedError(`PayPal ${this._fundingSource || ''} is not available for your region. Please use PayPal Checkout instead.`);\n    }\n\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './index';\n\nexport default function createPaypalCommercePaymentProcessor(scriptLoader: ScriptLoader, requestSender: RequestSender) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(paypalScriptLoader, paypalCommerceRequestSender);\n}\n","import { PaymentMethod } from '../..';\nimport { AmazonPayV2ButtonInitializeOptions } from '../../../checkout-buttons/strategies/amazon-pay-v2';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonInitializeOptions): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(containerId, options);\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n"],"sourceRoot":""}